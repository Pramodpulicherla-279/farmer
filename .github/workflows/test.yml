name: Android APK Testing
on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      # Set up Java
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Proper Android SDK setup
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          emulator: true
          api-level: 31
          build-tools: 31.0.0
          platform: android-31
          ndk: none
          cmake: none
          arch: x86_64

      # Configure environment
      - name: Set up Android environment
        run: |
          echo "$ANDROID_SDK_ROOT/emulator" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          mkdir -p ~/.android/avd
          echo "ANDROID_AVD_HOME=$HOME/.android/avd" >> $GITHUB_ENV

      # Emulator setup
      - name: Set up emulator
        run: |
          yes | sdkmanager --licenses
          sdkmanager --install "system-images;android-31;google_apis;x86_64"
          
          echo "Creating AVD..."
          avdmanager create avd \
            --name "test_avd" \
            --package "system-images;android-31;google_apis;x86_64" \
            --device "pixel_4" \  # Changed to lighter device
            --force
          
          echo "AVD created:"
          emulator -list-avds

      # Start emulator with hardware acceleration
      - name: Start emulator
        run: |
          echo "Starting emulator..."
          emulator -avd test_avd \
            -no-window \
            -no-audio \
            -no-snapshot \
            -camera-back none \
            -camera-front none \
            -memory 2048 \
            -gpu swiftshader_indirect \
            -accel on \
            -no-boot-anim \
            -partition-size 2048 &
          
          echo "Waiting for device..."
          adb wait-for-device
          
          echo "Waiting for boot completion..."
          for i in {1..60}; do
            if adb shell getprop sys.boot_completed | grep -q "1"; then
              echo "Emulator ready after $i seconds"
              break
            fi
            sleep 1
          done
          
          # Disable animations for faster testing
          adb shell settings put global window_animation_scale 0
          adb shell settings put global transition_animation_scale 0
          adb shell settings put global animator_duration_scale 0

      # Node.js setup
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Install dependencies
      - name: Install dependencies
        run: |
          npm install -g appium@next
          npm install
          npm install -g allure-commandline

      # APK installation with retry
      - name: Install APK
        run: |
          for i in {1..3}; do
            if adb install -t -g ./Krishivaas_Farmer.apk; then
              echo "APK installed successfully"
              break
            else
              echo "Attempt $i failed, retrying..."
              sleep 5
            fi
          done
          adb shell pm list packages | grep com.krishivaas

      # Test execution
      - name: Run Tests
        env:
          APPIUM_PORT: 4723
        run: |
          # Start Appium with more detailed logging
          nohup appium \
            --log-level debug \
            --relaxed-security \
            --log-timestamp \
            --local-timezone > appium.log 2>&1 &
          
          # Wait for Appium to start
          sleep 15
          
          # Run tests with more logging
          npx wdio run wdio.conf.js --logLevel=debug || true
          
          # Save all relevant logs
          mkdir -p test-results
          cp appium.log test-results/
          adb logcat -d > test-results/logcat.log
          adb bugreport test-results/bugreport.zip

      # Results processing
      - name: Process results
        if: always()
        run: |
          # Generate Allure report
          allure generate allure-results --clean -o allure-report
          
          # Check for test failures
          if grep -q "failed" wdio.log; then
            echo "::warning::Some tests failed"
            echo "::group::Test Failures"
            grep -A 5 "failed" wdio.log
            echo "::endgroup::"
          fi

      # Artifacts upload
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_id }}
          path: |
            allure-report/
            test-results/
            screenshots/
            wdio.log
            appium.log

      # Cleanup
      - name: Clean up
        if: always()
        run: |
          adb emu kill || true
          pkill -f "emulator" || true
          pkill -f "appium" || true