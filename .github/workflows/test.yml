name: Android APK Testing
on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4

      # Set up Java
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Android SDK setup with specific versions
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          emulator: true
          api-level: 31
          build-tools: 31.0.0
          platform: android-31
          cmdline-tools: '8.0'
          ndk: none
          cmake: none

      # Configure environment
      - name: Set up Android environment
        run: |
          echo "$ANDROID_SDK_ROOT/emulator" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/cmdline-tools/8.0/bin" >> $GITHUB_PATH
          mkdir -p ~/.android/avd
          echo "ANDROID_AVD_HOME=$HOME/.android/avd" >> $GITHUB_ENV

      # Install ARM system image instead of x86_64 for better compatibility
      - name: Install system image
        run: |
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "emulator"
          sdkmanager "system-images;android-31;google_apis;arm64-v8a"  # Changed to ARM

      # Create AVD with ARM image
      - name: Create AVD
        run: |
          device_id=$(avdmanager list device | grep -A 5 "pixel_4" | grep "id:" | awk '{print $2}' | head -1)
          
          avdmanager create avd \
            --name test_avd \
            --package "system-images;android-31;google_apis;arm64-v8a" \
            --device "$device_id" \
            --force
          
          # Configure AVD to use software rendering
          echo "hw.gpu.mode=swiftshader" >> ~/.android/avd/test_avd.avd/config.ini
          echo "hw.cpu.arch=arm64" >> ~/.android/avd/test_avd.avd/config.ini

      # Start emulator with software rendering
      - name: Start emulator
        timeout-minutes: 10
        run: |
          echo "Starting emulator with software rendering..."
          emulator -avd test_avd \
            -no-window \
            -no-audio \
            -no-snapshot \
            -memory 2048 \
            -gpu swiftshader \
            -no-boot-anim \
            -partition-size 2048 \
            -verbose \
            -qemu -cpu cortex-a57 &
          
          # Wait for device
          adb wait-for-device
          
          # Wait for boot completion
          for i in {1..120}; do  # Increased timeout for ARM emulation
            if adb shell getprop sys.boot_completed | grep -q "1"; then
              echo "Emulator ready after $i seconds"
              break
            fi
            sleep 2
          done

      # Continue with the rest of your workflow...
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install -g appium@next
          npm install
          npm install -g allure-commandline

      - name: Install APK
        run: |
          adb install -t -g ./Krishivaas_Farmer.apk
          adb shell pm list packages | grep com.krishivaas

      - name: Run Tests
        env:
          APPIUM_PORT: 4723
        run: |
          nohup appium --log-level info --relaxed-security > appium.log 2>&1 &
          sleep 15
          npx wdio run wdio.conf.js || true
          mkdir -p test-results
          cp appium.log test-results/
          adb logcat -d > test-results/logcat.log

      - name: Process results
        if: always()
        run: |
          allure generate allure-results --clean -o allure-report
          if grep -q "failed" wdio.log; then
            echo "::warning::Some tests failed"
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            allure-report/
            test-results/
            wdio.log

      - name: Clean up
        if: always()
        run: |
          adb emu kill || true
          pkill -f "emulator" || true