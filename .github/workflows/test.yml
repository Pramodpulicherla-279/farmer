name: Android CI Tests
on: [push]

env:
  ANDROID_EMULATOR_WAIT_TIME_BEFORE_KILL: 10
  ADB_INSTALL_TIMEOUT: 30

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # Increased overall timeout

    steps:
      - uses: actions/checkout@v4

      # Cache Android SDK to speed up builds
      - name: Cache Android SDK
        uses: actions/cache@v3
        with:
          path: |
            ~/.android/cache
            $ANDROID_HOME
          key: ${{ runner.os }}-android-sdk-${{ hashFiles('**/build.gradle') }}

      # Java Environment
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      # Android Environment Setup
      - name: Configure Android SDK
        run: |
          mkdir -p $ANDROID_HOME/licenses
          echo "d56f5187479451eabf01fb78af6dfcb131a6481e" > $ANDROID_HOME/licenses/android-sdk-license
          echo "84831b9409646a918e30573bab4c9c91346d8abd" > $ANDROID_HOME/licenses/android-sdk-preview-license

          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install \
            "platform-tools" "emulator" "platforms;android-33" \
            "build-tools;33.0.1" "system-images;android-33;google_apis;x86_64"

          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_HOME/emulator" >> $GITHUB_PATH

      # Node Environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Dependencies
      - name: Install npm packages
        run: npm ci  # Using ci for more reliable installs

      - name: Install Allure CLI
        run: npm install -g allure-commandline

      # Clean up any previous emulator processes
      - name: Clean Previous Emulator Processes
        run: |
          echo "Cleaning up any existing emulator processes..."
          pkill -9 -f "emulator.*-avd" || true
          pkill -9 adb || true
          rm -rf ~/.android/adb* >/dev/null 2>&1

      # ADB Setup
      - name: Initialize ADB Environment
        timeout-minutes: 5
        run: |
          adb start-server
          sleep 5
          adb devices

      # Emulator Launch with improved configuration
      - name: Launch Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 33
          arch: x86_64
          profile: pixel_5
          emulator-options: >-
            -no-window
            -gpu swiftshader_indirect
            -no-snapshot
            -noaudio
            -no-boot-anim
            -no-accel
            -read-only
            -netdelay none
            -netspeed full
            -no-snapshot-save
          disable-animations: true
          emulator-boot-timeout: 1200  # 20 minutes
          script: echo "Starting emulator..."

      # Improved connection handling
      - name: Establish ADB Connection
        timeout-minutes: 30
        run: |
          # Wait for device to be visible
          adb wait-for-device
          
          # Function to check if device is fully booted
          check_boot_complete() {
            boot_completed=$(adb shell getprop sys.boot_completed | tr -d '\r')
            [ "$boot_completed" = "1" ] && return 0 || return 1
          }

          # Main retry loop
          max_wait_seconds=1800  # 30 minutes
          start_time=$(date +%s)
          attempt=1
          
          while [ $(($(date +%s) - start_time)) -lt $max_wait_seconds ]; do
            echo "Attempt $attempt - $(date)"
            
            if check_boot_complete; then
              echo "Emulator fully booted"
              
              # Additional readiness check
              if adb shell pm list packages >/dev/null; then
                echo "ADB connection stable"
                exit 0
              fi
            fi
            
            echo "Not ready yet, waiting 10 seconds..."
            sleep 10
            ((attempt++))
          done

          echo "::error::Failed to establish stable ADB connection after $max_wait_seconds seconds"
          echo "::group::Debug Information"
          adb devices -l
          adb shell getprop
          adb logcat -d | tail -n 50
          echo "::endgroup::"
          exit 1

      # Device Preparation
      - name: Prepare Emulator
        run: |
          # Unlock device
          adb shell input keyevent 82
          
          # Disable animations
          adb shell settings put global window_animation_scale 0
          adb shell settings put global transition_animation_scale 0
          adb shell settings put global animator_duration_scale 0
          
          # Wait for package manager
          adb wait-for-device
          adb shell pm list packages >/dev/null
          echo "Device prepared for testing"

      # Test Execution
      - name: Run UI Tests
        timeout-minutes: 45
        run: npx wdio run wdio.conf.js

      # Force stop emulator after tests
      - name: Force Stop Emulator
        if: always()
        run: |
          echo "Stopping emulator forcefully..."
          adb kill-server
          
          EMULATOR_PID=$(pgrep -f "emulator.*-avd")
          if [ -n "$EMULATOR_PID" ]; then
            echo "Killing emulator process $EMULATOR_PID"
            kill -9 $EMULATOR_PID
          fi

      # Test Reporting
      - name: Generate Allure Report
        if: always()
        run: |
          allure generate allure-results -o allure-report --clean

      - name: Deploy Test Report
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          keep_files: true