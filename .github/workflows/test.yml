name: Android APK Testing
on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 25  # Reduced from 30 for better resource management

    steps:
      - uses: actions/checkout@v4

      # Cache Android SDK to speed up subsequent runs
      - name: Cache Android SDK
        uses: actions/cache@v3
        id: android-cache
        with:
          path: |
            ~/.android
            /usr/local/lib/android/sdk
          key: ${{ runner.os }}-android-30

      # Set up Java with optimized settings
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # Install only essential Android components
      - name: Install Android SDK
        if: steps.android-cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update -qq && sudo apt-get install -y wget unzip
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          unzip -q cmdline-tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses >/dev/null
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --install \
            "platform-tools" \
            "platforms;android-30" \
            "build-tools;30.0.3" \
            "system-images;android-30;google_apis;x86_64" \
            "emulator" >/dev/null

      # Configure environment
      - name: Set up environment
        run: |
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/emulator" >> $GITHUB_PATH

      # Create AVD with optimized settings
      - name: Create AVD
        run: |
          echo no | avdmanager create avd \
            --force \
            --name test \
            --package "system-images;android-30;google_apis;x86_64" \
            --device "Nexus 5" \
            --abi "x86_64" \
            --sdcard 512M

      # Start emulator with performance optimizations
      - name: Start emulator
        env:
          ANDROID_AVD_HOME: ~/.android/avd
        run: |
          emulator @test \
            -no-audio \
            -no-boot-anim \
            -no-window \
            -gpu swiftshader_indirect \
            -memory 2048 \
            -partition-size 2048 \
            -cache-size 512 \
            -no-snapshot \
            -skip-adb-auth \
            -no-snapshot-save \
            -no-snapshot-load \
            -accel off \
            -verbose -show-kernel &
          echo "Emulator started with PID $!"

      # Robust emulator boot waiting
      - name: Wait for emulator
        timeout-minutes: 5
        run: |
          adb start-server
          for i in {1..30}; do
            if adb shell getprop sys.boot_completed | grep -q 1; then
              echo "Emulator ready after $((i*2)) seconds"
              adb shell settings put global window_animation_scale 0
              adb shell settings put global transition_animation_scale 0
              adb shell settings put global animator_duration_scale 0
              exit 0
            fi
            sleep 2
          done
          echo "Emulator failed to boot"
          exit 1

      # Install APK with verification
      - name: Install APK
        run: |
          adb install -t -g ./Krishivaas_Farmer.apk
          adb shell pm list packages | grep -q com.krishivaas || (echo "APK not installed"; exit 1)
          echo "APK verified and installed"

      # Run tests with proper working directory
      - name: Run tests
        working-directory: ./test
        timeout-minutes: 15
        run: |
          npm ci --no-audit --no-fund
          npm run test -- --maxWorkers=2

      # Collect results with better error handling
      - name: Collect results
        if: always()
        run: |
          mkdir -p test-results
          adb pull /sdcard/Download/allure-results test-results/allure || echo "No Allure results found"
          adb shell screencap -p /sdcard/screen.png
          adb pull /sdcard/screen.png test-results/last-screen.png || echo "Failed to capture screen"
          adb logcat -d > test-results/logcat.txt

      # Upload artifacts
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: test-results