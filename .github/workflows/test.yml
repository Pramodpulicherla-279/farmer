name: Android APK Testing
on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      # Setup Node.js for Allure
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Allure
        run: npm install -g allure-commandline

      # Authenticate Firebase
      - name: Authenticate Firebase
        run: |
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' > firebase-key.json
          gcloud auth activate-service-account --key-file=firebase-key.json
          gcloud config set project ${{ secrets.FIREBASE_PROJECT_ID }}

      # Upload APK & Run Tests on Firebase Test Lab
      - name: Run Firebase Test Lab
        run: |
          gcloud firebase test android run \
            --type instrumentation \
            --app=./Krishivaas_Farmer.apk \
            --test=./Krishivaas_Farmer_Test.apk \
            --device model=Pixel2,version=30,locale=en,orientation=portrait \
            --results-bucket=gs://$FIREBASE_PROJECT_ID.appspot.com \
            --results-dir=local-results

      # Download Test Results from Firebase
      - name: Fetch Test Results
        run: |
          mkdir -p ./firebase-results
          gcloud storage cp -r gs://$FIREBASE_PROJECT_ID.appspot.com/local-results ./firebase-results

      # Extract Allure Results from Firebase Results
      - name: Extract Allure Results
        run: |
          mkdir -p ./allure-results
          cp -r ./firebase-results/**/*.xml ./allure-results || echo "No Allure results found"

      # Generate Allure Report
      - name: Generate Allure Report
        run: |
          allure generate ./allure-results --clean -o ./allure-report

      # Upload Allure Report as Artifact
      - uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: ./allure-report
